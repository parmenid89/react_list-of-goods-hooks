{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortField","goodsFromServer","App","useState","sortField","setSortField","reverse","setReverse","goods","resultingArr","sort","good1","good2","SORT_FIELD_ALPHABET","localeCompare","SORT_FIELD_LENGTH","length","resultGoodsArr","className","type","cn","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAmBKA,E,4EAbQC,EAA4B,CACvC,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,+BAAAA,E,4BAAAA,M,KAiCE,IAAME,EAAgB,WAC3B,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA8BF,oBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KAEMC,EA3BR,SAAwBA,EAAxB,GAA8E,IAAnCJ,EAAkC,EAAlCA,UAAWE,EAAuB,EAAvBA,QAC9CG,EAAY,YAAOD,GAmBzB,OAjBIJ,GACFK,EAAaC,MAAK,SAACC,EAAOC,GACxB,OAAQR,GACN,KAAMJ,EAAUa,oBACd,OAAOF,EAAMG,cAAcF,GAC7B,KAAMZ,EAAUe,kBACd,OAAOJ,EAAMK,OAASJ,EAAMI,OAC9B,QACE,OAAO,MAKXV,GACFG,EAAaH,UAGRG,EAOOQ,CAAehB,EAAiB,CAAEG,YAAWE,YAO3D,OACE,sBAAKY,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAG,SAAU,UACtB,CACE,WAAYhB,IAAcJ,EAAUa,sBAExCQ,QAAU,kBAAMhB,EAAaL,EAAUa,sBANzC,iCAWA,wBACEM,KAAK,SACLD,UAAWE,IAAG,SAAU,aACtB,CACE,WAAYhB,IAAcJ,EAAUe,oBAExCM,QAAU,kBAAMhB,EAAaL,EAAUe,oBANzC,4BAWA,wBACEI,KAAK,SACLD,UAAWE,IAAG,SAAU,aACtB,CACE,YAAwB,IAAZd,IAEhBe,QAAS,kBAAMd,GAAYD,IAN7B,sBAWEF,GAAaE,IACb,wBACEa,KAAK,SACLD,UAAU,4BACVG,QA7CI,WACZhB,EAAa,IACbE,GAAW,IAwCL,sBAWJ,6BACGC,EAAMc,KAAI,SAAAC,GAAI,OACb,oBACE,UAAQ,OADV,SAIGA,GAFIA,YChHjBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.1ca9de65.chunk.js","sourcesContent":["import { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport cn from 'classnames';\n\nimport './App.scss';\n\nexport const goodsFromServer: string[] = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortField {\n  SORT_FIELD_ALPHABET = 'alphabet',\n  SORT_FIELD_LENGTH = 'length',\n}\n\ninterface SortParams {\n  sortField: string,\n  reverse: boolean,\n}\n\nfunction resultGoodsArr(goods: string[], { sortField, reverse }: SortParams) {\n  const resultingArr = [...goods];\n\n  if (sortField) {\n    resultingArr.sort((good1, good2) => {\n      switch (sortField) {\n        case (SortField.SORT_FIELD_ALPHABET):\n          return good1.localeCompare(good2);\n        case (SortField.SORT_FIELD_LENGTH):\n          return good1.length - good2.length;\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (reverse) {\n    resultingArr.reverse();\n  }\n\n  return resultingArr;\n}\n\nexport const App: React.FC = () => {\n  const [sortField, setSortField] = useState('');\n  const [reverse, setReverse] = useState(false);\n  // eslint-disable-next-line\n  const goods = resultGoodsArr(goodsFromServer, { sortField, reverse });\n\n  const reset = () => {\n    setSortField('');\n    setReverse(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn('button', 'is-info',\n            {\n              'is-light': sortField !== SortField.SORT_FIELD_ALPHABET,\n            })}\n          onClick={(() => setSortField(SortField.SORT_FIELD_ALPHABET))}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button', 'is-success',\n            {\n              'is-light': sortField !== SortField.SORT_FIELD_LENGTH,\n            })}\n          onClick={(() => setSortField(SortField.SORT_FIELD_LENGTH))}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button', 'is-warning',\n            {\n              'is-light': reverse !== true,\n            })}\n          onClick={() => setReverse(!reverse)}\n        >\n          Reverse\n        </button>\n\n        {(sortField || reverse) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={reset}\n          >\n            Reset\n          </button>\n        )}\n\n      </div>\n\n      <ul>\n        {goods.map(good => (\n          <li\n            data-cy=\"Good\"\n            key={good}\n          >\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}